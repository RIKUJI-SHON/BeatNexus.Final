[
  {
    "schema_name": "public",
    "function_name": "admin_force_release_email",
    "return_type": "json",
    "arguments": "p_email text",
    "function_definition": "CREATE OR REPLACE FUNCTION public.admin_force_release_email(p_email text)\n RETURNS json\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n  v_user_count INTEGER;\n  v_timestamp BIGINT;\nBEGIN\n  -- ÊåáÂÆö„Åï„Çå„Åü„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Çí‰ΩøÁî®„Åó„Å¶„ÅÑ„Çã„É¶„Éº„Ç∂„ÉºÊï∞„ÇíÁ¢∫Ë™ç\n  SELECT COUNT(*) INTO v_user_count\n  FROM auth.users \n  WHERE email = p_email;\n  \n  IF v_user_count = 0 THEN\n    RETURN json_build_object(\n      'success', true,\n      'message', 'Email address is already available',\n      'email', p_email\n    );\n  END IF;\n  \n  v_timestamp := EXTRACT(EPOCH FROM NOW())::BIGINT;\n  \n  -- Ë©≤ÂΩì„Åô„Çãauth.users„É¨„Ç≥„Éº„Éâ„ÇíÂÆåÂÖ®„Å´ÂåøÂêçÂåñ\n  UPDATE auth.users\n  SET \n    email = 'force-released-' || v_timestamp || '-' || SUBSTRING(id::text, 1, 8) || '@admin.released',\n    raw_user_meta_data = jsonb_build_object(\n      'admin_force_released', true,\n      'release_timestamp', v_timestamp,\n      'original_email_force_released', p_email,\n      'release_method', 'admin_force_release'\n    ),\n    updated_at = NOW()\n  WHERE email = p_email;\n  \n  RETURN json_build_object(\n    'success', true,\n    'message', 'Email address forcefully released',\n    'email', p_email,\n    'affected_users', v_user_count,\n    'timestamp', v_timestamp\n  );\nEND;\n$function$\n"
  },
  {
    "schema_name": "public",
    "function_name": "admin_force_release_email_v2",
    "return_type": "json",
    "arguments": "p_email text",
    "function_definition": "CREATE OR REPLACE FUNCTION public.admin_force_release_email_v2(p_email text)\n RETURNS json\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n  v_user_count INTEGER;\n  v_identity_count INTEGER;\n  v_timestamp BIGINT;\nBEGIN\n  -- ÊåáÂÆö„Åï„Çå„Åü„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Çí‰ΩøÁî®„Åó„Å¶„ÅÑ„Çã„É¶„Éº„Ç∂„ÉºÊï∞„ÇíÁ¢∫Ë™ç\n  SELECT COUNT(*) INTO v_user_count\n  FROM auth.users \n  WHERE email = p_email;\n  \n  -- identities„ÉÜ„Éº„Éñ„É´„ÅÆË©≤ÂΩì„Éá„Éº„ÇøÊï∞„ÇÇÁ¢∫Ë™ç\n  SELECT COUNT(*) INTO v_identity_count\n  FROM auth.identities \n  WHERE provider_id = p_email \n     OR identity_data::text LIKE '%' || p_email || '%';\n  \n  IF v_user_count = 0 AND v_identity_count = 0 THEN\n    RETURN json_build_object(\n      'success', true,\n      'message', 'Email address is already completely available',\n      'email', p_email\n    );\n  END IF;\n  \n  v_timestamp := EXTRACT(EPOCH FROM NOW())::BIGINT;\n  \n  -- Ë©≤ÂΩì„Åô„Çãauth.users„É¨„Ç≥„Éº„Éâ„ÇíÂÆåÂÖ®„Å´ÂåøÂêçÂåñ\n  UPDATE auth.users\n  SET \n    email = 'force-released-' || v_timestamp || '-' || SUBSTRING(id::text, 1, 8) || '@admin.released',\n    raw_user_meta_data = jsonb_build_object(\n      'admin_force_released', true,\n      'release_timestamp', v_timestamp,\n      'original_email_force_released', p_email,\n      'release_method', 'admin_force_release_v2'\n    ),\n    updated_at = NOW()\n  WHERE email = p_email;\n  \n  -- üÜï auth.identities„Åã„Çâ„ÇÇÂÆåÂÖ®ÂâäÈô§\n  DELETE FROM auth.identities \n  WHERE provider_id = p_email \n     OR identity_data::text LIKE '%' || p_email || '%';\n  \n  RETURN json_build_object(\n    'success', true,\n    'message', 'Email address forcefully released (including identities)',\n    'email', p_email,\n    'affected_users', v_user_count,\n    'affected_identities', v_identity_count,\n    'timestamp', v_timestamp\n  );\nEND;\n$function$\n"
  },
  {
    "schema_name": "public",
    "function_name": "auto_release_deleted_emails",
    "return_type": "json",
    "arguments": "",
    "function_definition": "CREATE OR REPLACE FUNCTION public.auto_release_deleted_emails()\n RETURNS json\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n  v_updated_count INTEGER := 0;\n  v_user_record RECORD;\n  v_timestamp BIGINT;\n  v_new_email TEXT;\nBEGIN\n  -- deleted@example.com ÂΩ¢Âºè„ÅÆ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Çí‰∏ÄÊÑè„Å™ÂΩ¢Âºè„Å´Â§âÊèõ\n  FOR v_user_record IN\n    SELECT id, email \n    FROM auth.users \n    WHERE email = 'deleted@example.com'\n      AND (raw_user_meta_data->>'email_immediately_released')::boolean IS NOT TRUE\n    LIMIT 100  -- ‰∏ÄÂ∫¶„Å´Âá¶ÁêÜ„Åô„Çã‰ª∂Êï∞„ÇíÂà∂Èôê\n  LOOP\n    -- „Çø„Ç§„É†„Çπ„Çø„É≥„Éó‰ªò„Åç„ÅÆÊñ∞„Åó„ÅÑ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÇíÁîüÊàê\n    v_timestamp := EXTRACT(EPOCH FROM NOW())::BIGINT;\n    v_new_email := 'deleted-' || SUBSTRING(v_user_record.id::text, 1, 8) || '-' || v_timestamp || '@deleted.local';\n    \n    -- auth.users „ÉÜ„Éº„Éñ„É´„ÇíÊõ¥Êñ∞\n    UPDATE auth.users\n    SET \n      email = v_new_email,\n      raw_user_meta_data = COALESCE(raw_user_meta_data, '{}'::jsonb) || \n        jsonb_build_object(\n          'email_auto_released_at', NOW()::text,\n          'email_immediately_released', true,\n          'auto_release_timestamp', v_timestamp,\n          'previous_email', v_user_record.email\n        ),\n      updated_at = NOW()\n    WHERE id = v_user_record.id;\n    \n    -- profiles„ÉÜ„Éº„Éñ„É´„ÇÇÊõ¥Êñ∞\n    UPDATE profiles\n    SET \n      email = v_new_email,\n      updated_at = NOW()\n    WHERE id = v_user_record.id;\n    \n    v_updated_count := v_updated_count + 1;\n  END LOOP;\n  \n  RETURN json_build_object(\n    'success', true,\n    'updated_count', v_updated_count,\n    'message', 'Email addresses auto-released for reuse'\n  );\nEND;\n$function$\n"
  },
  {
    "schema_name": "public",
    "function_name": "auto_set_user_language",
    "return_type": "trigger",
    "arguments": "",
    "function_definition": "CREATE OR REPLACE FUNCTION public.auto_set_user_language()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nBEGIN\n  -- Êñ∞Ë¶è‰ΩúÊàêÊôÇ„Å´language„ÅåNULL„ÅÆÂ†¥Âêà„ÄÅ„Éá„Éï„Ç©„É´„Éà„ÅßËã±Ë™û„ÇíË®≠ÂÆö\n  IF NEW.language IS NULL THEN\n    NEW.language := 'en';\n  END IF;\n  \n  RETURN NEW;\nEND;\n$function$\n"
  },
  {
    "schema_name": "public",
    "function_name": "calculate_elo_rating",
    "return_type": "json",
    "arguments": "winner_rating integer, loser_rating integer, k_factor integer DEFAULT 32",
    "function_definition": "CREATE OR REPLACE FUNCTION public.calculate_elo_rating(winner_rating integer, loser_rating integer, k_factor integer DEFAULT 32)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n  expected_winner NUMERIC;\n  expected_loser NUMERIC;\n  new_winner_rating INTEGER;\n  new_loser_rating INTEGER;\nBEGIN\n  -- Calculate expected scores (probability of winning)\n  expected_winner := 1.0 / (1.0 + power(10.0, (loser_rating - winner_rating) / 400.0));\n  expected_loser := 1.0 / (1.0 + power(10.0, (winner_rating - loser_rating) / 400.0));\n  \n  -- Calculate new ratings\n  new_winner_rating := winner_rating + k_factor * (1.0 - expected_winner);\n  new_loser_rating := loser_rating + k_factor * (0.0 - expected_loser);\n  \n  -- Ensure ratings don't go below minimum (1100) - Updated from 800\n  new_winner_rating := GREATEST(new_winner_rating, 1100);\n  new_loser_rating := GREATEST(new_loser_rating, 1100);\n  \n  RETURN json_build_object(\n    'winner_rating', new_winner_rating,\n    'loser_rating', new_loser_rating,\n    'rating_change_winner', new_winner_rating - winner_rating,\n    'rating_change_loser', new_loser_rating - loser_rating\n  );\nEND;\n$function$\n"
  },
  {
    "schema_name": "public",
    "function_name": "calculate_elo_rating_change",
    "return_type": "integer",
    "arguments": "player_rating integer, opponent_rating integer, result numeric, k_factor integer DEFAULT 32",
    "function_definition": "CREATE OR REPLACE FUNCTION public.calculate_elo_rating_change(player_rating integer, opponent_rating integer, result numeric, k_factor integer DEFAULT 32)\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n  expected_score NUMERIC;\n  rating_change INTEGER;\nBEGIN\n  -- ÊúüÂæÖÂãùÁéá„ÇíË®àÁÆó (Elo Rating System)\n  expected_score := 1.0 / (1.0 + POWER(10.0, (opponent_rating - player_rating) / 400.0));\n  \n  -- „É¨„Éº„ÉÜ„Ç£„É≥„Ç∞Â§âÂãï„ÇíË®àÁÆó\n  rating_change := ROUND(k_factor * (result - expected_score));\n  \n  RETURN rating_change;\nEND;\n$function$\n"
  },
  {
    "schema_name": "public",
    "function_name": "calculate_elo_rating_with_format",
    "return_type": "json",
    "arguments": "winner_rating integer, loser_rating integer, battle_format text DEFAULT 'MAIN_BATTLE'::text",
    "function_definition": "CREATE OR REPLACE FUNCTION public.calculate_elo_rating_with_format(winner_rating integer, loser_rating integer, battle_format text DEFAULT 'MAIN_BATTLE'::text)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n  k_factor INTEGER;\n  expected_winner NUMERIC;\n  expected_loser NUMERIC;\n  new_winner_rating INTEGER;\n  new_loser_rating INTEGER;\nBEGIN\n  -- Get K-factor based on battle format\n  k_factor := get_k_factor_by_format(battle_format);\n  \n  -- Calculate expected scores (probability of winning)\n  expected_winner := 1.0 / (1.0 + power(10.0, (loser_rating - winner_rating) / 400.0));\n  expected_loser := 1.0 / (1.0 + power(10.0, (winner_rating - loser_rating) / 400.0));\n  \n  -- Calculate new ratings\n  new_winner_rating := winner_rating + k_factor * (1.0 - expected_winner);\n  new_loser_rating := loser_rating + k_factor * (0.0 - expected_loser);\n  \n  -- Ensure ratings don't go below minimum (1100)\n  new_winner_rating := GREATEST(new_winner_rating, 1100);\n  new_loser_rating := GREATEST(new_loser_rating, 1100);\n  \n  RETURN json_build_object(\n    'winner_rating', new_winner_rating,\n    'loser_rating', new_loser_rating,\n    'rating_change_winner', new_winner_rating - winner_rating,\n    'rating_change_loser', new_loser_rating - loser_rating,\n    'k_factor_used', k_factor,\n    'battle_format', battle_format\n  );\nEND;\n$function$\n"
  },
  {
    "schema_name": "public",
    "function_name": "calculate_tie_rating_with_format",
    "return_type": "json",
    "arguments": "player1_rating integer, player2_rating integer, battle_format text",
    "function_definition": "CREATE OR REPLACE FUNCTION public.calculate_tie_rating_with_format(player1_rating integer, player2_rating integer, battle_format text)\n RETURNS json\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n  k_factor INTEGER;\n  player1_change INTEGER;\n  player2_change INTEGER;\n  new_player1_rating INTEGER;\n  new_player2_rating INTEGER;\nBEGIN\n  -- Get K-factor based on battle format\n  k_factor := get_k_factor_by_format(battle_format);\n  \n  -- Calculate rating changes for tie (result = 0.5 for both players)\n  player1_change := calculate_elo_rating_change(player1_rating, player2_rating, 0.5, k_factor);\n  player2_change := calculate_elo_rating_change(player2_rating, player1_rating, 0.5, k_factor);\n  \n  -- Apply changes with minimum rating protection\n  new_player1_rating := GREATEST(player1_rating + player1_change, 1100);\n  new_player2_rating := GREATEST(player2_rating + player2_change, 1100);\n  \n  RETURN json_build_object(\n    'player1_rating', new_player1_rating,\n    'player2_rating', new_player2_rating,\n    'player1_change', new_player1_rating - player1_rating,\n    'player2_change', new_player2_rating - player2_rating,\n    'k_factor_used', k_factor,\n    'battle_format', battle_format\n  );\nEND;\n$function$\n"
  },
  {
    "schema_name": "public",
    "function_name": "call_edge_function",
    "return_type": "void",
    "arguments": "function_name text, payload jsonb",
    "function_definition": "CREATE OR REPLACE FUNCTION public.call_edge_function(function_name text, payload jsonb)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n  edge_function_url text;\nBEGIN\n  -- Edge Function „ÅÆURL „ÇíÊßãÁØâ\n  edge_function_url := 'https://wdttluticnlqzmqmfvgt.supabase.co/functions/v1/' || function_name;\n\n  -- HTTP POST „ÅßEdge Function„ÇíÂëº„Å≥Âá∫„ÅóÔºàÈùûÂêåÊúüÔºâ\n  -- NOTE: http Êã°Âºµ„Çí‰ΩøÁî®\n  PERFORM net.http_post(\n    url := edge_function_url,\n    body := payload,\n    headers := jsonb_build_object(\n      'Content-Type', 'application/json',\n      'Authorization', 'Bearer ' || current_setting('request.jwt.claims', true)::jsonb->>'aud'\n    )\n  );\n  \nEXCEPTION WHEN OTHERS THEN\n  -- „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Å¶„ÇÇ„Éà„É™„Ç¨„ÉºÂá¶ÁêÜ„ÅØÁ∂ôÁ∂ö\n  RAISE LOG 'Failed to call edge function %: %', function_name, SQLERRM;\nEND;\n$function$\n"
  },
  {
    "schema_name": "public",
    "function_name": "can_submit_video",
    "return_type": "boolean",
    "arguments": "",
    "function_definition": "CREATE OR REPLACE FUNCTION public.can_submit_video()\n RETURNS boolean\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n  v_active_season RECORD;\n  v_season_end_date TIMESTAMPTZ;\nBEGIN\n  -- „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™„Ç∑„Éº„Ç∫„É≥„ÇíÂèñÂæó\n  SELECT * INTO v_active_season\n  FROM public.seasons\n  WHERE status = 'active'\n    AND start_at <= NOW()\n    AND end_at >= NOW()\n  ORDER BY start_at DESC\n  LIMIT 1;\n  \n  -- „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™„Ç∑„Éº„Ç∫„É≥„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØÊäïÁ®ø‰∏çÂèØ\n  IF NOT FOUND THEN\n    RETURN FALSE;\n  END IF;\n  \n  -- „Ç∑„Éº„Ç∫„É≥ÁµÇ‰∫ÜÊó•„Åã„Çâ5Êó•‰ª•ÂÜÖ„Åã„Å©„ÅÜ„Åã„Çí„ÉÅ„Çß„ÉÉ„ÇØ\n  v_season_end_date := v_active_season.end_at;\n  \n  -- ÁèæÂú®ÊôÇÂàª„Åå„Ç∑„Éº„Ç∫„É≥ÁµÇ‰∫Ü5Êó•Ââç‰ª•Èôç„ÅÆÂ†¥Âêà„ÅØÊäïÁ®ø‰∏çÂèØ\n  IF NOW() >= (v_season_end_date - INTERVAL '5 days') THEN\n    RETURN FALSE;\n  END IF;\n  \n  -- ‰∏äË®òÊù°‰ª∂„ÇíÊ∫Ä„Åü„Åï„Å™„ÅÑÂ†¥Âêà„ÅØÊäïÁ®øÂèØËÉΩ\n  RETURN TRUE;\nEND;\n$function$\n"
  },
  {
    "schema_name": "public",
    "function_name": "cancel_vote",
    "return_type": "json",
    "arguments": "p_battle_id uuid",
    "function_definition": "CREATE OR REPLACE FUNCTION public.cancel_vote(p_battle_id uuid)\n RETURNS json\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n  v_user_id UUID;\n  v_existing_vote CHAR(1);\n  v_existing_season_id UUID;\n  v_existing_comment TEXT;\n  v_has_comment BOOLEAN := FALSE;\n  v_vote_points_decrement INTEGER := 0;\n  v_vote_count_decrement INTEGER := 0;  -- üÜï ÈÄöÁÆóÊäïÁ•®„Ç´„Ç¶„É≥„ÉàÊ∏õÁÆóÁî®„ÅÆÂ§âÊï∞\n  v_current_season_id UUID;\n  v_debug_info JSON;\nBEGIN\n  v_user_id := auth.uid();\n  \n  IF v_user_id IS NULL THEN\n    RETURN json_build_object('success', false, 'error', 'Not authenticated');\n  END IF;\n\n  -- Êó¢Â≠ò„ÅÆÊäïÁ•®ÊÉÖÂ†±„ÇíÂèñÂæóÔºà„Ç≥„É°„É≥„Éà„ÅÆÊúâÁÑ°„ÇÇÁ¢∫Ë™çÔºâ\n  SELECT vote, season_id, comment \n  INTO v_existing_vote, v_existing_season_id, v_existing_comment\n  FROM battle_votes\n  WHERE battle_id = p_battle_id AND user_id = v_user_id;\n\n  IF v_existing_vote IS NULL THEN\n    RETURN json_build_object('success', false, 'error', 'No vote to cancel');\n  END IF;\n\n  -- „Ç≥„É°„É≥„Éà„ÅÆÊúâÁÑ°„ÇíÂà§ÂÆö\n  v_has_comment := v_existing_comment IS NOT NULL AND LENGTH(TRIM(v_existing_comment)) > 0;\n\n  -- „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Ç∑„Éº„Ç∫„É≥„ÇíÂèñÂæó\n  BEGIN\n    SELECT id INTO v_current_season_id \n    FROM public.seasons \n    WHERE status = 'active'\n      AND start_at <= NOW()\n      AND end_at >= NOW()\n    ORDER BY start_at DESC\n    LIMIT 1;\n  EXCEPTION WHEN OTHERS THEN\n    v_current_season_id := NULL;\n  END;\n\n  -- „Éù„Ç§„É≥„ÉàÊ∏õÁÆóÈáè„ÇíÊ±∫ÂÆö\n  IF v_existing_season_id IS NOT NULL THEN\n    IF v_has_comment THEN\n      -- üîß ‰øÆÊ≠£: „Ç≥„É°„É≥„Éà‰ªò„ÅçÊäïÁ•®„ÅÆÂèñ„ÇäÊ∂à„Åó: „Ç∑„Éº„Ç∫„É≥„Éù„Ç§„É≥„Éà-3„ÄÅÈÄöÁÆóÊäïÁ•®„Ç´„Ç¶„É≥„Éà-3\n      v_vote_points_decrement := 3;\n      v_vote_count_decrement := 3;\n    ELSE\n      -- ÊôÆÈÄö„ÅÆÊäïÁ•®„ÅÆÂèñ„ÇäÊ∂à„Åó: „Ç∑„Éº„Ç∫„É≥„Éù„Ç§„É≥„Éà-1„ÄÅÈÄöÁÆóÊäïÁ•®„Ç´„Ç¶„É≥„Éà-1\n      v_vote_points_decrement := 1;\n      v_vote_count_decrement := 1;\n    END IF;\n  ELSE\n    -- „Ç∑„Éº„Ç∫„É≥ID„Åå„Å™„ÅÑÂ†¥Âêà„ÅØ„Ç∑„Éº„Ç∫„É≥„Éù„Ç§„É≥„ÉàÊ∏õÁÆó„Å™„Åó„ÄÅÈÄöÁÆóÊäïÁ•®„Ç´„Ç¶„É≥„Éà„ÅÆ„Åø-1\n    v_vote_points_decrement := 0;\n    v_vote_count_decrement := 1;\n  END IF;\n\n  -- „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„Çí‰ΩúÊàê\n  v_debug_info := json_build_object(\n    'has_comment', v_has_comment,\n    'comment_length', COALESCE(LENGTH(v_existing_comment), 0),\n    'vote_points_decrement', v_vote_points_decrement,\n    'vote_count_decrement', v_vote_count_decrement,  -- üÜï ÈÄöÁÆóÊäïÁ•®„Ç´„Ç¶„É≥„ÉàÊ∏õÁÆóÈáè\n    'existing_season_id', v_existing_season_id,\n    'current_season_id', v_current_season_id,\n    'vote_type', CASE WHEN v_has_comment THEN 'comment_vote' ELSE 'simple_vote' END,\n    'current_time', NOW()\n  );\n\n  -- ÊäïÁ•®„ÇíÂâäÈô§\n  DELETE FROM battle_votes\n  WHERE battle_id = p_battle_id AND user_id = v_user_id;\n\n  -- „Éê„Éà„É´„ÅÆÊäïÁ•®Êï∞„ÇíÊõ¥Êñ∞\n  IF v_existing_vote = 'A' THEN\n    UPDATE active_battles SET votes_a = votes_a - 1 WHERE id = p_battle_id;\n  ELSE\n    UPDATE active_battles SET votes_b = votes_b - 1 WHERE id = p_battle_id;\n  END IF;\n\n  -- üîß ‰øÆÊ≠£: „É¶„Éº„Ç∂„Éº„ÅÆÊäïÁ•®Êï∞„ÇíÊõ¥Êñ∞Ôºà„Ç≥„É°„É≥„ÉàÊúâÁÑ°„Å´Âøú„Åò„ÅüÈÅ©Âàá„Å™„Éù„Ç§„É≥„ÉàÊ∏õÁÆóÔºâ\n  IF v_existing_season_id IS NOT NULL THEN\n    UPDATE profiles \n    SET \n      vote_count = GREATEST(0, vote_count - v_vote_count_decrement),  -- üîß ‰øÆÊ≠£: „Ç≥„É°„É≥„ÉàÊúâÁÑ°„Å´Âøú„Åò„ÅüÊ∏õÁÆó\n      season_vote_points = GREATEST(0, season_vote_points - v_vote_points_decrement),\n      updated_at = NOW()\n    WHERE id = v_user_id;\n  ELSE\n    -- „Ç∑„Éº„Ç∫„É≥ID„Åå„Å™„ÅÑÂ†¥Âêà„ÅØÈÄöÁÆóÊäïÁ•®Êï∞„ÅÆ„ÅøÊ∏õÁÆó\n    UPDATE profiles \n    SET \n      vote_count = GREATEST(0, vote_count - v_vote_count_decrement),  -- üîß ‰øÆÊ≠£: „Ç≥„É°„É≥„ÉàÊúâÁÑ°„Å´Âøú„Åò„ÅüÊ∏õÁÆó\n      updated_at = NOW()\n    WHERE id = v_user_id;\n  END IF;\n\n  RETURN json_build_object(\n    'success', true, \n    'cancelled_vote', v_existing_vote,\n    'had_comment', v_has_comment,\n    'comment_preview', CASE \n      WHEN v_has_comment THEN LEFT(v_existing_comment, 50) || '...'\n      ELSE NULL \n    END,\n    'vote_points_deducted', v_vote_points_decrement,\n    'vote_count_deducted', v_vote_count_decrement,  -- üÜï ÈÄöÁÆóÊäïÁ•®„Ç´„Ç¶„É≥„ÉàÊ∏õÁÆóÈáè\n    'had_season_id', v_existing_season_id IS NOT NULL,\n    'season_id', v_existing_season_id,\n    'vote_type', CASE WHEN v_has_comment THEN 'comment_vote' ELSE 'simple_vote' END,\n    'debug', v_debug_info\n  );\nEND;\n$function$\n"
  },
  {
    "schema_name": "public",
    "function_name": "check_submission_cooldown",
    "return_type": "json",
    "arguments": "p_user_id uuid",
    "function_definition": "CREATE OR REPLACE FUNCTION public.check_submission_cooldown(p_user_id uuid)\n RETURNS json\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n  v_last_submission_time TIMESTAMPTZ;\n  v_hours_since_last NUMERIC;\n  v_cooldown_remaining_minutes INTEGER;\n  v_can_submit BOOLEAN;\n  v_message_key TEXT;\n  v_message_params JSON;\nBEGIN\n  -- „É¶„Éº„Ç∂„Éº„ÅÆÊúÄÊñ∞„ÅÆÊäïÁ®øÊôÇÂàª„ÇíÂèñÂæó\n  SELECT created_at INTO v_last_submission_time\n  FROM submissions\n  WHERE user_id = p_user_id\n  ORDER BY created_at DESC\n  LIMIT 1;\n\n  -- ÊúÄÂàù„ÅÆÊäïÁ®ø„ÅÆÂ†¥Âêà„ÅØÊäïÁ®øÂèØËÉΩ\n  IF v_last_submission_time IS NULL THEN\n    RETURN json_build_object(\n      'can_submit', true,\n      'last_submission_time', null,\n      'hours_since_last', null,\n      'cooldown_remaining_minutes', 0,\n      'message_key', 'submission.cooldown.canSubmit',\n      'message_params', json_build_object()\n    );\n  END IF;\n\n  -- ÊúÄÂæå„ÅÆÊäïÁ®ø„Åã„Çâ„ÅÆÁµåÈÅéÊôÇÈñì„ÇíË®àÁÆó\n  v_hours_since_last := EXTRACT(EPOCH FROM (NOW() - v_last_submission_time)) / 3600;\n  \n  -- 1ÊôÇÈñìÔºà60ÂàÜÔºâÁµåÈÅé„Åó„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ\n  IF v_hours_since_last >= 1 THEN\n    v_can_submit := true;\n    v_cooldown_remaining_minutes := 0;\n    v_message_key := 'submission.cooldown.canSubmit';\n    v_message_params := json_build_object();\n  ELSE\n    v_can_submit := false;\n    v_cooldown_remaining_minutes := CEIL((1 - v_hours_since_last) * 60);\n    v_message_key := 'submission.cooldown.restriction';\n    v_message_params := json_build_object(\n      'hours', FLOOR(v_cooldown_remaining_minutes / 60),\n      'minutes', v_cooldown_remaining_minutes % 60,\n      'totalMinutes', v_cooldown_remaining_minutes\n    );\n  END IF;\n\n  RETURN json_build_object(\n    'can_submit', v_can_submit,\n    'last_submission_time', v_last_submission_time,\n    'hours_since_last', ROUND(v_hours_since_last, 2),\n    'cooldown_remaining_minutes', v_cooldown_remaining_minutes,\n    'message_key', v_message_key,\n    'message_params', v_message_params\n  );\n\nEXCEPTION\n  WHEN OTHERS THEN\n    RETURN json_build_object(\n      'can_submit', false,\n      'last_submission_time', null,\n      'hours_since_last', null,\n      'cooldown_remaining_minutes', 0,\n      'message_key', 'submission.cooldown.error',\n      'message_params', json_build_object('error', SQLERRM)\n    );\nEND;\n$function$\n"
  },
  {
    "schema_name": "public",
    "function_name": "cleanup_all_deleted_user_videos",
    "return_type": "json",
    "arguments": "",
    "function_definition": "CREATE OR REPLACE FUNCTION public.cleanup_all_deleted_user_videos()\n RETURNS json\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n  v_deleted_user RECORD;\n  v_cleanup_result JSON;\n  v_total_videos_deleted INTEGER := 0;\n  v_total_videos_failed INTEGER := 0;\n  v_processed_users INTEGER := 0;\nBEGIN\n  -- ÂâäÈô§Ê∏à„Åø„É¶„Éº„Ç∂„Éº„Çí„É´„Éº„ÉóÂá¶ÁêÜ\n  FOR v_deleted_user IN\n    SELECT id \n    FROM profiles \n    WHERE is_deleted = TRUE\n    LIMIT 50  -- ‰∏ÄÂ∫¶„Å´Âá¶ÁêÜ„Åô„Çã„É¶„Éº„Ç∂„ÉºÊï∞„ÇíÂà∂Èôê\n  LOOP\n    -- ÂêÑ„É¶„Éº„Ç∂„Éº„ÅÆÂãïÁîª„ÇíÂâäÈô§\n    SELECT cleanup_all_deleted_user_videos() INTO v_cleanup_result;\n    \n    -- ÁµêÊûú„ÇíÈõÜË®à\n    v_total_videos_deleted := v_total_videos_deleted + COALESCE((v_cleanup_result->>'deleted_count')::INTEGER, 0);\n    v_total_videos_failed := v_total_videos_failed + COALESCE((v_cleanup_result->>'failed_count')::INTEGER, 0);\n    v_processed_users := v_processed_users + 1;\n    \n  END LOOP;\n  \n  RETURN json_build_object(\n    'success', true,\n    'processed_users', v_processed_users,\n    'total_videos_deleted', v_total_videos_deleted,\n    'total_videos_failed', v_total_videos_failed,\n    'message', 'Bulk video cleanup completed'\n  );\nEND;\n$function$\n"
  },
  {
    "schema_name": "public",
    "function_name": "complete_battle_with_season_update",
    "return_type": "json",
    "arguments": "p_battle_id uuid, p_winner_id uuid DEFAULT NULL::uuid",
    "function_definition": "CREATE OR REPLACE FUNCTION public.complete_battle_with_season_update(p_battle_id uuid, p_winner_id uuid DEFAULT NULL::uuid)\n RETURNS json\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$DECLARE\n  v_global_rating_result JSON;\n  v_season_points_result JSON;\n  v_current_season_id UUID;\nBEGIN\n  -- „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Ç∑„Éº„Ç∫„É≥„ÇíÂèñÂæó\n  SELECT id INTO v_current_season_id \n  FROM seasons \n  WHERE status = 'active'\n  ORDER BY created_at DESC\n  LIMIT 1;\n\n  -- 1. Êó¢Â≠ò„ÅÆglobal_ratingÊõ¥Êñ∞ÔºàÊó¢Â≠ò„Ç∑„Çπ„ÉÜ„É†Ôºâ\n  BEGIN\n    SELECT update_battle_ratings_safe(p_battle_id, p_winner_id) INTO v_global_rating_result;\n  EXCEPTION WHEN OTHERS THEN\n    v_global_rating_result := json_build_object(\n      'success', false,\n      'error', 'global_rating_update_failed',\n      'message', SQLERRM\n    );\n  END;\n\n  -- 2. Êñ∞„Åó„ÅÑseason_pointsÊõ¥Êñ∞Ôºà„Ç∑„Éº„Ç∫„É≥Âà∂Ôºâ\n  BEGIN\n    IF v_current_season_id IS NOT NULL THEN\n      SELECT update_season_points_after_battle(p_battle_id, p_winner_id) INTO v_season_points_result;\n    ELSE\n      v_season_points_result := json_build_object(\n        'success', false,\n        'error', 'no_active_season',\n        'message', '„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™„Ç∑„Éº„Ç∫„É≥„Åå„Å™„ÅÑ„Åü„ÇÅ„Ç∑„Éº„Ç∫„É≥„Éù„Ç§„É≥„ÉàÊõ¥Êñ∞„Çí„Çπ„Ç≠„ÉÉ„Éó'\n      );\n    END IF;\n  EXCEPTION WHEN OTHERS THEN\n    v_season_points_result := json_build_object(\n      'success', false,\n      'error', 'season_points_update_failed',\n      'message', SQLERRM\n    );\n  END;\n\n  RETURN json_build_object(\n    'success', true,\n    'battle_id', p_battle_id,\n    'winner_id', p_winner_id,\n    'current_season_id', v_current_season_id,\n    'global_rating_update', v_global_rating_result,\n    'season_points_update', v_season_points_result\n  );\nEND;$function$\n"
  },
  {
    "schema_name": "public",
    "function_name": "complete_battle_with_video_archiving",
    "return_type": "json",
    "arguments": "p_battle_id uuid, p_winner_id uuid DEFAULT NULL::uuid",
    "function_definition": "CREATE OR REPLACE FUNCTION public.complete_battle_with_video_archiving(p_battle_id uuid, p_winner_id uuid DEFAULT NULL::uuid)\n RETURNS json\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n  v_battle_rec active_battles;\n  v_archived_battle_id UUID;\n  v_player1_video_url TEXT;  \n  v_player2_video_url TEXT;\n  v_player1_deleted BOOLEAN := FALSE;\n  v_player2_deleted BOOLEAN := FALSE;\n  v_rating_result JSON;\n  v_season_result JSON;\n  v_player1_username TEXT;\n  v_player2_username TEXT;\nBEGIN\n  -- 1. „Éê„Éà„É´Ë©≥Á¥∞„ÇíÂèñÂæó\n  SELECT * INTO v_battle_rec\n  FROM public.active_battles\n  WHERE id = p_battle_id;\n\n  IF NOT FOUND THEN\n    RETURN json_build_object(\n      'success', false,\n      'error', 'Battle not found'\n    );\n  END IF;\n\n  -- 2. „Éó„É¨„Ç§„É§„Éº„ÅÆÂâäÈô§Áä∂ÊÖã„ÇíÁ¢∫Ë™ç\n  SELECT COALESCE(is_deleted, FALSE) INTO v_player1_deleted\n  FROM public.profiles \n  WHERE id = v_battle_rec.player1_user_id;\n\n  SELECT COALESCE(is_deleted, FALSE) INTO v_player2_deleted\n  FROM public.profiles \n  WHERE id = v_battle_rec.player2_user_id;\n\n  -- 3. „Éó„É¨„Ç§„É§„Éº„ÅÆ„É¶„Éº„Ç∂„ÉºÂêç„ÇíÂèñÂæóÔºàÈÄöÁü•Áî®Ôºâ\n  SELECT username INTO v_player1_username\n  FROM public.profiles \n  WHERE id = v_battle_rec.player1_user_id;\n\n  SELECT username INTO v_player2_username\n  FROM public.profiles \n  WHERE id = v_battle_rec.player2_user_id;\n\n  -- 4. ÂãïÁîªURL„ÇíÂèñÂæóÔºàÊ∞∏Á∂ö‰øùÂ≠òÁî®Ôºâ\n  SELECT video_url INTO v_player1_video_url\n  FROM public.submissions\n  WHERE id = v_battle_rec.player1_submission_id;\n\n  SELECT video_url INTO v_player2_video_url\n  FROM public.submissions\n  WHERE id = v_battle_rec.player2_submission_id;\n\n  -- 5. archived_battles„ÉÜ„Éº„Éñ„É´„Å´ÊåøÂÖ•\n  INSERT INTO public.archived_battles (\n    original_battle_id,\n    winner_id,\n    final_votes_a,\n    final_votes_b,\n    battle_format,\n    player1_user_id,\n    player2_user_id,\n    player1_submission_id,\n    player2_submission_id,\n    player1_video_url,\n    player2_video_url,\n    archived_at,\n    created_at,\n    updated_at\n  ) VALUES (\n    p_battle_id,\n    p_winner_id,\n    v_battle_rec.votes_a,\n    v_battle_rec.votes_b,\n    v_battle_rec.battle_format,\n    v_battle_rec.player1_user_id,\n    v_battle_rec.player2_user_id,\n    v_battle_rec.player1_submission_id,\n    v_battle_rec.player2_submission_id,\n    v_player1_video_url,\n    v_player2_video_url,\n    NOW(),\n    NOW(),\n    NOW()\n  ) RETURNING id INTO v_archived_battle_id;\n\n  -- 6. archived_battle_votes „Å´ÊäïÁ•®„Éá„Éº„Çø„Çí„Ç≥„Éî„Éº\n  INSERT INTO public.archived_battle_votes (\n    archived_battle_id,\n    user_id,\n    vote,\n    comment,\n    created_at\n  )\n  SELECT \n    v_archived_battle_id,\n    bv.user_id,\n    bv.vote,\n    bv.comment,\n    bv.created_at\n  FROM public.battle_votes bv\n  WHERE bv.battle_id = p_battle_id \n    AND bv.comment IS NOT NULL \n    AND bv.comment != '';\n\n  -- 7. submissions„ÉÜ„Éº„Éñ„É´„ÅÆ„Çπ„ÉÜ„Éº„Çø„Çπ„ÇíÊõ¥Êñ∞\n  UPDATE public.submissions\n  SET \n    status = 'BATTLE_ENDED',\n    updated_at = NOW()\n  WHERE id IN (v_battle_rec.player1_submission_id, v_battle_rec.player2_submission_id);\n\n  -- 8. „É¨„Éº„ÉÜ„Ç£„É≥„Ç∞Êõ¥Êñ∞ÔºàÊ≠£„Åó„ÅÑÈñ¢Êï∞Âêç„Å®ÂºïÊï∞„Çí‰ΩøÁî®Ôºâ\n  SELECT update_battle_ratings_safe(\n    p_battle_id,\n    p_winner_id,\n    v_player1_deleted,\n    v_player2_deleted\n  ) INTO v_rating_result;\n\n  -- 9. „Ç∑„Éº„Ç∫„É≥„Éù„Ç§„É≥„ÉàÊõ¥Êñ∞ÔºàÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅÆ„ÅøÔºâ\n  BEGIN\n    SELECT update_season_points_after_battle(\n      p_battle_id,\n      p_winner_id\n    ) INTO v_season_result;\n  EXCEPTION\n    WHEN undefined_function THEN\n      v_season_result := json_build_object('skipped', true, 'reason', 'function not found');\n  END;\n\n  -- üÜï 10. „Éê„Éà„É´ÁµêÊûúÈÄöÁü•„ÇíÈÄÅ‰ø°\n  -- „Éó„É¨„Ç§„É§„Éº1„Å∏„ÅÆÈÄöÁü•\n  IF NOT v_player1_deleted THEN\n    IF p_winner_id = v_battle_rec.player1_user_id THEN\n      -- ÂãùÂà©ÈÄöÁü•\n      INSERT INTO public.notifications (\n        user_id,\n        title,\n        message,\n        type,\n        related_battle_id,\n        is_read,\n        created_at,\n        updated_at\n      ) VALUES (\n        v_battle_rec.player1_user_id,\n        '„Éê„Éà„É´ÂãùÂà©ÔºÅ',\n        FORMAT('ÂØæÊà¶Áõ∏Êâã %s „Åï„Çì„Å®„ÅÆ„Éê„Éà„É´„Å´ÂãùÂà©„Åó„Åæ„Åó„ÅüÔºÅ', COALESCE(v_player2_username, 'Unknown')),\n        'battle_win',\n        p_battle_id,\n        false,\n        NOW(),\n        NOW()\n      );\n    ELSIF p_winner_id = v_battle_rec.player2_user_id THEN\n      -- ÊïóÂåóÈÄöÁü•\n      INSERT INTO public.notifications (\n        user_id,\n        title,\n        message,\n        type,\n        related_battle_id,\n        is_read,\n        created_at,\n        updated_at\n      ) VALUES (\n        v_battle_rec.player1_user_id,\n        '„Éê„Éà„É´ÁµêÊûú',\n        FORMAT('ÂØæÊà¶Áõ∏Êâã %s „Åï„Çì„Å®„ÅÆ„Éê„Éà„É´„ÅØÊÉúÊïó„Åß„Åó„Åü„ÄÇÊ¨°ÂõûÈ†ëÂºµ„Çä„Åæ„Åó„Çá„ÅÜÔºÅ', COALESCE(v_player2_username, 'Unknown')),\n        'battle_lose',\n        p_battle_id,\n        false,\n        NOW(),\n        NOW()\n      );\n    ELSE\n      -- Âºï„ÅçÂàÜ„ÅëÈÄöÁü•\n      INSERT INTO public.notifications (\n        user_id,\n        title,\n        message,\n        type,\n        related_battle_id,\n        is_read,\n        created_at,\n        updated_at\n      ) VALUES (\n        v_battle_rec.player1_user_id,\n        '„Éê„Éà„É´ÁµêÊûú',\n        FORMAT('ÂØæÊà¶Áõ∏Êâã %s „Åï„Çì„Å®„ÅÆ„Éê„Éà„É´„ÅØÂºï„ÅçÂàÜ„Åë„Åß„Åó„Åü„ÄÇ', COALESCE(v_player2_username, 'Unknown')),\n        'battle_draw',\n        p_battle_id,\n        false,\n        NOW(),\n        NOW()\n      );\n    END IF;\n  END IF;\n\n  -- „Éó„É¨„Ç§„É§„Éº2„Å∏„ÅÆÈÄöÁü•\n  IF NOT v_player2_deleted THEN\n    IF p_winner_id = v_battle_rec.player2_user_id THEN\n      -- ÂãùÂà©ÈÄöÁü•\n      INSERT INTO public.notifications (\n        user_id,\n        title,\n        message,\n        type,\n        related_battle_id,\n        is_read,\n        created_at,\n        updated_at\n      ) VALUES (\n        v_battle_rec.player2_user_id,\n        '„Éê„Éà„É´ÂãùÂà©ÔºÅ',\n        FORMAT('ÂØæÊà¶Áõ∏Êâã %s „Åï„Çì„Å®„ÅÆ„Éê„Éà„É´„Å´ÂãùÂà©„Åó„Åæ„Åó„ÅüÔºÅ', COALESCE(v_player1_username, 'Unknown')),\n        'battle_win',\n        p_battle_id,\n        false,\n        NOW(),\n        NOW()\n      );\n    ELSIF p_winner_id = v_battle_rec.player1_user_id THEN\n      -- ÊïóÂåóÈÄöÁü•\n      INSERT INTO public.notifications (\n        user_id,\n        title,\n        message,\n        type,\n        related_battle_id,\n        is_read,\n        created_at,\n        updated_at\n      ) VALUES (\n        v_battle_rec.player2_user_id,\n        '„Éê„Éà„É´ÁµêÊûú',\n        FORMAT('ÂØæÊà¶Áõ∏Êâã %s „Åï„Çì„Å®„ÅÆ„Éê„Éà„É´„ÅØÊÉúÊïó„Åß„Åó„Åü„ÄÇÊ¨°ÂõûÈ†ëÂºµ„Çä„Åæ„Åó„Çá„ÅÜÔºÅ', COALESCE(v_player1_username, 'Unknown')),\n        'battle_lose',\n        p_battle_id,\n        false,\n        NOW(),\n        NOW()\n      );\n    ELSE\n      -- Âºï„ÅçÂàÜ„ÅëÈÄöÁü•\n      INSERT INTO public.notifications (\n        user_id,\n        title,\n        message,\n        type,\n        related_battle_id,\n        is_read,\n        created_at,\n        updated_at\n      ) VALUES (\n        v_battle_rec.player2_user_id,\n        '„Éê„Éà„É´ÁµêÊûú',\n        FORMAT('ÂØæÊà¶Áõ∏Êâã %s „Åï„Çì„Å®„ÅÆ„Éê„Éà„É´„ÅØÂºï„ÅçÂàÜ„Åë„Åß„Åó„Åü„ÄÇ', COALESCE(v_player1_username, 'Unknown')),\n        'battle_draw',\n        p_battle_id,\n        false,\n        NOW(),\n        NOW()\n      );\n    END IF;\n  END IF;\n\n  -- 11. active_battles„Å®battle_votes„Åã„ÇâÂâäÈô§ÔºàCASCADEÔºâ\n  DELETE FROM public.active_battles WHERE id = p_battle_id;\n\n  -- 12. ÊàêÂäü„É¨„Çπ„Éù„É≥„Çπ„ÇíËøî„Åô\n  RETURN json_build_object(\n    'success', true,\n    'archived_battle_id', v_archived_battle_id,\n    'winner_id', p_winner_id,\n    'final_votes_a', v_battle_rec.votes_a,\n    'final_votes_b', v_battle_rec.votes_b,\n    'player1_video_url', v_player1_video_url,\n    'player2_video_url', v_player2_video_url,\n    'player1_deleted', v_player1_deleted,\n    'player2_deleted', v_player2_deleted,\n    'rating_update', v_rating_result,\n    'season_points_update', v_season_result,\n    'notifications_sent', CASE \n      WHEN v_player1_deleted AND v_player2_deleted THEN 0\n      WHEN v_player1_deleted OR v_player2_deleted THEN 1\n      ELSE 2\n    END\n  );\n\nEXCEPTION\n  WHEN OTHERS THEN\n    RETURN json_build_object(\n      'success', false,\n      'error', 'Transaction failed',\n      'error_details', SQLERRM\n    );\nEND;\n$function$\n"
  }
]
