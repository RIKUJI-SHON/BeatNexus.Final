# 電話番号重複チェック機能実装計画書

## 📋 実装ログ

**作成日**: 2025年1月28日  
**対象機能**: 電話番号重複チェック・既存番号使用防止機能の実装計画  
**緊急度**: 🔴 高（セキュリティホール修正のため即座に実施）  
**実装者**: 開発チーム  

## 🚨 現在の重大な問題

### セキュリティホール
- **同一電話番号での複数アカウント作成が可能**
- **認証記録がどこにも保存されない**
- **Edge Functionが存在しないDB関数を呼び出している**

### システムへの影響
- スパムアカウント作成が容易
- データ整合性の欠如
- 監査証跡の不在
- システムの信頼性失墜

## 🎯 実装計画

### Phase 1: 緊急修正（即座に実施 - 24時間以内）

#### 1.1 データベース実装
**優先度**: 🔴 最高
**所要時間**: 2-3時間

##### 実施内容
1. **マイグレーションファイル適用**
   - ファイル: `20250128120000_phone_verification_complete_implementation.sql`
   - 対象: 開発環境 (`wdttluticnlqzmqmfvgt`)
   - 内容: テーブル・関数・インデックス・RLS一括作成

##### 実施手順
```bash
# 1. 開発環境でマイグレーション実行
cd c:\Users\rikuj\BEATNEXUS.R
supabase db push --project-ref wdttluticnlqzmqmfvgt

# 2. マイグレーション確認
psql -d postgresql://[connection_string] -c "SELECT * FROM phone_verifications LIMIT 1;"
psql -d postgresql://[connection_string] -c "SELECT check_phone_availability('+819012345678');"

# 3. 関数動作確認
psql -d postgresql://[connection_string] -c "SELECT record_phone_verification('550e8400-e29b-41d4-a716-446655440000', '+819012345678');"
```

##### 確認項目
- [ ] `phone_verifications` テーブル作成済み
- [ ] `audit_logs` テーブル作成済み  
- [ ] `security_audit_log` テーブル作成済み
- [ ] `check_phone_availability` 関数動作確認
- [ ] `record_phone_verification` 関数動作確認
- [ ] `normalize_phone_number` 関数動作確認
- [ ] 全インデックス作成済み
- [ ] RLS設定済み

#### 1.2 Edge Function修正
**優先度**: 🔴 最高
**所要時間**: 1-2時間

##### 実施内容
1. **エラーハンドリング強化**
   - DB関数不存在時のフォールバック処理追加
   - 適切なエラーメッセージ返却

2. **ログ機能追加**
   - 監査ログ記録機能追加
   - セキュリティログ記録機能追加

##### 修正箇所
- ファイル: `supabase/functions/phone-verification/index.ts`
- バージョン: v2.0 → v2.1

##### 実施手順
```typescript
// 1. DB関数呼び出し部分を修正
const { data: availabilityCheck, error: availabilityError } = 
  await callDatabaseFunction(supabaseAdmin, 'check_phone_availability', {
    phone_input: normalizedPhone
  });

// 2. エラーハンドリング追加
if (availabilityError) {
  if (availabilityError.code === 'FUNCTION_NOT_FOUND') {
    // フォールバック処理
    console.warn('Using fallback duplicate check');
    // ... フォールバック処理実装
  }
}

// 3. ログ機能追加
await logAuditEvent(
  supabaseAdmin,
  'phone_verifications',
  'SEND_SMS',
  null,
  { phone_hash: hashPhoneNumber(normalizedPhone) }
);
```

##### 確認項目
- [ ] DB関数エラー時のフォールバック動作確認
- [ ] 監査ログ記録確認
- [ ] セキュリティログ記録確認
- [ ] エラーメッセージの適切性確認

#### 1.3 緊急動作確認
**優先度**: 🔴 最高
**所要時間**: 1時間

##### 確認内容
1. **重複チェック動作確認**
   ```bash
   # 新規電話番号 - 成功するはず
   curl -X POST "$SUPABASE_URL/functions/v1/phone-verification" \
     -H "Authorization: Bearer $SUPABASE_ANON_KEY" \
     -H "Content-Type: application/json" \
     -d '{"action":"send_code","phoneNumber":"+819012345678"}'
   
   # 同じ電話番号 - 重複エラーが出るはず
   curl -X POST "$SUPABASE_URL/functions/v1/phone-verification" \
     -H "Authorization: Bearer $SUPABASE_ANON_KEY" \
     -H "Content-Type: application/json" \
     -d '{"action":"send_code","phoneNumber":"+819012345678"}'
   ```

2. **認証記録確認**
   ```sql
   -- 認証記録が保存されているか確認
   SELECT * FROM phone_verifications ORDER BY created_at DESC LIMIT 5;
   SELECT * FROM audit_logs WHERE table_name = 'phone_verifications' ORDER BY created_at DESC LIMIT 5;
   ```

##### 成功基準
- [ ] 新規電話番号での認証が成功
- [ ] 重複電話番号での認証が適切にエラー
- [ ] 認証記録がDBに保存される
- [ ] ログが適切に記録される

---

### Phase 2: セキュリティ強化（1週間以内）

#### 2.1 レート制限機能実装
**優先度**: 🟡 高
**所要時間**: 4-6時間

##### 実施内容
1. **レート制限ロジック追加**
   - 1時間に3回までの制限
   - 違反時24時間ブロック

2. **セキュリティイベント記録**
   - レート制限違反の記録
   - 不正パターンの検出

##### 実施手順
```sql
-- レート制限テーブル追加（必要に応じて）
CREATE TABLE IF NOT EXISTS rate_limits (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  phone_number_hash TEXT NOT NULL,
  attempt_count INTEGER DEFAULT 1,
  first_attempt_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  blocked_until TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

#### 2.2 監視・アラート機能
**優先度**: 🟡 高
**所要時間**: 3-4時間

##### 実施内容
1. **異常検知機能**
   - 短時間での大量試行検知
   - 異常なIPパターン検知

2. **管理者通知機能**
   - 重要なセキュリティイベント通知
   - 日次・週次レポート

---

### Phase 3: 運用改善（2週間以内）

#### 3.1 管理ダッシュボード
**優先度**: 🟢 中
**所要時間**: 8-10時間

##### 実施内容
1. **統計ダッシュボード**
   - 認証成功・失敗統計
   - セキュリティイベント統計

2. **管理機能**
   - 電話番号ブロック機能
   - 認証記録検索機能

#### 3.2 パフォーマンス最適化
**優先度**: 🟢 中
**所要時間**: 4-6時間

##### 実施内容
1. **インデックス最適化**
   - クエリパフォーマンス分析
   - 追加インデックス作成

2. **キャッシュ機能**
   - 重複チェック結果キャッシュ
   - レート制限情報キャッシュ

---

## 📅 詳細スケジュール

### Day 1 (緊急対応日)
**時間**: 09:00 - 18:00

| 時間 | 作業内容 | 担当者 | 所要時間 |
|------|----------|--------|----------|
| 09:00-12:00 | データベースマイグレーション実行・確認 | DB担当 | 3時間 |
| 13:00-15:00 | Edge Function修正・デプロイ | Backend担当 | 2時間 |
| 15:00-16:00 | 統合テスト実行 | QA担当 | 1時間 |
| 16:00-17:00 | 緊急動作確認・検証 | 全員 | 1時間 |
| 17:00-18:00 | バグ修正・調整 | 全員 | 1時間 |

### Day 2-3 (安定化期間)
- 本番環境での動作監視
- 緊急バグ修正対応
- ユーザーフィードバック収集

### Week 1 (セキュリティ強化)
- レート制限機能実装
- セキュリティログ分析機能
- 異常検知・アラート機能

### Week 2 (運用改善)
- 管理ダッシュボード作成
- パフォーマンス最適化
- ドキュメント整備

---

## 🧪 テスト計画

### 緊急テスト (Day 1)
1. **機能テスト**
   - 重複チェック基本動作
   - 認証記録保存
   - エラーハンドリング

2. **回帰テスト**
   - 既存機能への影響確認
   - SMS送信・OTP検証動作

3. **セキュリティテスト**
   - SQLインジェクション耐性
   - 重複防止動作

### 包括的テスト (Week 1)
1. **パフォーマンステスト**
   - レスポンス時間測定
   - 同時接続テスト

2. **負荷テスト**
   - 大量リクエスト処理
   - システム安定性確認

3. **セキュリティ監査**
   - 脆弱性スキャン
   - ペネトレーションテスト

---

## 🔒 セキュリティチェックリスト

### データベースセキュリティ
- [ ] RLS設定の確認
- [ ] 適切なアクセス権限設定
- [ ] SQLインジェクション対策確認
- [ ] データ暗号化確認

### API セキュリティ
- [ ] 入力値検証の確認
- [ ] レート制限の動作確認
- [ ] エラーレスポンスの情報漏洩チェック
- [ ] 認証・認可の確認

### 運用セキュリティ
- [ ] ログ記録の適切性確認
- [ ] 監視アラートの設定
- [ ] インシデント対応手順の確認
- [ ] バックアップ・リストア手順の確認

---

## 📊 成功指標・KPI

### 機能指標
- **重複防止率**: 100% (同一電話番号での複数アカウント作成を完全に防止)
- **認証記録率**: 100% (全ての認証が適切にDBに記録される)
- **システム稼働率**: 99.9%以上

### パフォーマンス指標
- **SMS送信API応答時間**: 3秒以内
- **OTP検証API応答時間**: 1秒以内
- **重複チェック処理時間**: 500ms以内

### セキュリティ指標
- **SQLインジェクション脆弱性**: 0件
- **認証バイパス脆弱性**: 0件
- **データ漏洩インシデント**: 0件

### ユーザー体験指標
- **認証成功率**: 95%以上
- **エラー解決率**: 90%以上 (適切なエラーメッセージによる)
- **ユーザーサポート問い合わせ減少率**: 50%以上

---

## 🚨 リスク管理

### 技術リスク
1. **マイグレーション失敗リスク**
   - **対策**: 事前バックアップ取得、ロールバック手順準備
   - **影響度**: 高
   - **発生確率**: 低

2. **パフォーマンス劣化リスク**
   - **対策**: 段階的実装、負荷テスト実施
   - **影響度**: 中
   - **発生確率**: 中

3. **Twilio API制限リスク**
   - **対策**: レート制限設定、フォールバック機能実装
   - **影響度**: 中
   - **発生確率**: 低

### 運用リスク
1. **セキュリティインシデントリスク**
   - **対策**: 包括的セキュリティテスト、監視機能強化
   - **影響度**: 高
   - **発生確率**: 低

2. **ユーザー影響リスク**
   - **対策**: 段階的リリース、ロールバック準備
   - **影響度**: 中
   - **発生確率**: 中

---

## 📋 チェックリスト

### 実装前チェック
- [ ] 要件定義書の確認・承認
- [ ] 設計仕様書の確認・承認
- [ ] テスト仕様書の確認・承認
- [ ] バックアップ計画の確認
- [ ] ロールバック手順の確認

### 実装中チェック
- [ ] マイグレーション実行確認
- [ ] 関数動作確認
- [ ] Edge Function修正確認
- [ ] ログ記録確認
- [ ] セキュリティテスト実行

### 実装後チェック
- [ ] 全機能動作確認
- [ ] パフォーマンステスト実行
- [ ] セキュリティ監査実行
- [ ] ユーザー受け入れテスト
- [ ] 運用監視設定

### 本番リリース前チェック
- [ ] 全テストケース合格確認
- [ ] パフォーマンス基準達成確認
- [ ] セキュリティ基準達成確認
- [ ] ドキュメント整備確認
- [ ] 運用手順書作成確認

---

## 実装ログ更新履歴

**2025-01-28**: 電話番号重複チェック機能の詳細な実装計画書を作成。緊急修正から段階的改善まで包括的な計画を策定。セキュリティホール修正のための具体的な実装手順とスケジュールを明確化。

---

**次のアクション**: Phase 1の緊急修正を即座に実施し、24時間以内にセキュリティホールを修正する。
