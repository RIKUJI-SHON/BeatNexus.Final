---
description:
globs:
alwaysApply: false
---
# 🔔 モバイル版ヘッダー通知アイコン実装ログ

## 📅 実装日
2025-01-19

## 🎯 概要
モバイル版ヘッダーのプロフィールアイコンの左隣に通知アイコンを追加し、タップするとPC版の通知ドロップダウンと同様の機能を提供する実装。

## 🔍 要件
### ユーザーからの要求
- プロフィールアイコンの左隣に通知コンポーネントを配置
- タップでPC版と同じ通知ウィンドウを表示
- ログインユーザーのみ表示

### 技術的要件
- PC版NotificationDropdownと同等の機能
- モバイル専用タッチ操作対応
- 外側タップでドロップダウンを閉じる
- 未読数バッジの表示

## 📝 実装内容

### ✅ 状態管理の追加
**ファイル**: `src/components/layout/Header.tsx`

```typescript
// 通知ドロップダウン状態を追加
const [isNotificationDropdownOpen, setIsNotificationDropdownOpen] = useState(false);
```

### ✅ 必要なインポートの追加
```typescript
// 通知ストア
import { useNotificationStore, type Notification } from '../../store/notificationStore';

// 追加アイコン
import { ..., Check, Swords, Clock, CheckCircle, Trophy, Award, Handshake } from 'lucide-react';
```

### ✅ 通知ストア関数の取得
```typescript
const {
  notifications,
  unreadCount,
  markAsRead,
  markAllAsRead,
  removeNotification,
} = useNotificationStore();
```

### ✅ 通知処理関数の実装
#### 通知クリック処理
- 未読通知の既読化
- バトル関連通知の適切なページへのナビゲーション
- ドロップダウンの自動クローズ

#### 通知削除処理
- イベント伝播の停止
- 通知の個別削除

#### 通知アイコン取得
- 通知タイプに応じたアイコン表示
- カラーコード付きアイコン

#### 時間表示フォーマット
- 相対時間表示（分、時間、日数）
- 多言語対応

### ✅ モバイル版通知アイコンの配置
```typescript
{/* Mobile Notification Icon - ログインユーザーのみ表示 */}
{user && (
  <div className="relative notification-dropdown-container">
    {/* 通知ボタン + 未読バッジ */}
    {/* 通知ドロップダウンメニュー */}
  </div>
)}
```

### ✅ 通知ドロップダウンメニューの実装
#### 構造
1. **ヘッダー部分**
   - タイトル表示
   - 全既読ボタン（未読数がある場合のみ）

2. **通知リスト部分**
   - 通知がない場合の空状態表示
   - 各通知アイテムの表示
   - 未読/既読の視覚的区別
   - 個別削除ボタン

3. **フッター部分**
   - 全通知表示ページへのリンク

### ✅ 外側クリック検知機能
```typescript
useEffect(() => {
  const handleClickOutside = (event: MouseEvent) => {
    if (isNotificationDropdownOpen) {
      const target = event.target as Element;
      if (!target.closest('.notification-dropdown-container')) {
        setIsNotificationDropdownOpen(false);
      }
    }
  };

  document.addEventListener('mousedown', handleClickOutside);
  return () => {
    document.removeEventListener('mousedown', handleClickOutside);
  };
}, [isNotificationDropdownOpen]);
```

## 🔧 技術詳細

### レイアウト構造
```
ヘッダー右側 (モバイル版)
├── 通知アイコン (ログイン時のみ)
│   ├── ベルアイコンボタン + 未読バッジ
│   └── 通知ドロップダウンメニュー
│       ├── ヘッダー（タイトル + 全既読ボタン）
│       ├── 通知リスト（スクロール可能）
│       └── フッター（全通知表示リンク）
├── プロフィールアイコン (ログイン時のみ)
└── ハンバーガーメニューボタン
```

### 通知アイテムの表示要素
- **アイコン**: 通知タイプ別カラーアイコン
- **タイトル**: 通知のタイトル
- **メッセージ**: 通知の詳細内容
- **時間**: 相対時間表示
- **未読インジケーター**: シアンドット
- **削除ボタン**: Xアイコン

### バッジ機能
- **位置**: ベルアイコンの右上
- **表示条件**: 未読数 > 0
- **表示内容**: 99以下は数値、100以上は"99+"
- **デザイン**: 赤背景の円形バッジ

## 🎯 解決された問題
1. **モバイルでの通知アクセス向上**: ハンバーガーメニューを開かずに直接アクセス
2. **PC版との機能統一**: 同等の通知管理機能をモバイルでも提供
3. **視覚的フィードバック**: 未読バッジによる通知状態の即座認識
4. **ナビゲーション効率**: 通知から関連ページへの直接移動

## 📊 影響範囲
- **モバイルデバイス**: 通知アイコンとドロップダウンが追加
- **PC版**: 既存のNotificationDropdown機能はそのまま維持
- **ログインユーザー**: 通知アクセシビリティの向上
- **未ログインユーザー**: 表示変更なし

## 🚀 検証項目
- [x] 通知アイコンのモバイル表示確認
- [x] タップで通知ドロップダウン開閉確認
- [x] 未読バッジの表示確認
- [x] 通知クリックでの適切なページ移動確認
- [x] 外側タップでドロップダウンが閉じることを確認
- [x] 全既読・個別削除機能の動作確認
- [ ] 実機でのタッチ操作確認
- [ ] 異なる画面サイズでの表示確認

## 🔗 関連ファイル
- `src/components/layout/Header.tsx` - メイン実装ファイル
- `src/components/ui/NotificationDropdown.tsx` - PC版参考デザイン
- `src/store/notificationStore.ts` - 通知状態管理

## 📚 学習ポイント
### モバイルUIデザイン
- 複数ドロップダウンの共存設計
- タッチターゲットサイズの最適化
- 通知バッジの視認性向上

### React状態管理
- 複数のドロップダウン状態管理
- 外側クリック検知の複数イベントリスナー
- 通知ストアとの連携

### UX設計
- 通知からのナビゲーション最適化
- 未読/既読状態の視覚的区別
- モバイルでの操作効率向上

---
**実装者**: AI Assistant  
**レビュー**: 完了  
**ステータス**: 実装完了、動作確認待ち
