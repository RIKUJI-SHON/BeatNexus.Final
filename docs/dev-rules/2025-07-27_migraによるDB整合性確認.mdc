# DB整合性確認レポート：2025年7月27日

## 1. 関数定義の比較結果

### ✅ 完全一致確認済み
- **本番環境**: 89個の関数
- **開発環境**: 89個の関数
- **結果**: すべての関数が完全に一致（関数名、引数、戻り値、ソースコード）

## 2. 追加確認すべき差異ポイント

### A. テーブル構造とスキーマ差異 ⚠️
**発見された差異:**

#### 1. `posts`テーブルのカラム順序が異なる
- **本番環境**: id, user_id, content, likes, liked_by, comments_count, created_at, updated_at
- **開発環境**: id, user_id, content, created_at, likes, comments_count, liked_by

#### 2. `community_rankings_view`のカラム名差異
- **本番環境**: `rank_in_community`
- **開発環境**: `community_rank`

#### 3. `global_community_rankings_view`のカラム差異
- **本番環境**: `owner_username`, `owner_avatar_url`, `global_rank`
- **開発環境**: `rank`のみ

#### 4. `public_archived_battles`ビューの構造差異
**本番環境**:
- winner_id, player1_user_id, player2_user_id, created_at
- player1_username, player2_username

**開発環境**:
- winner_username
- player1_user_id, player2_user_idが存在しない

#### 5. `season_voter_rankings_view`のカラム差異
**本番環境**:
- id, username, avatar_url, season_vote_points, rank

**開発環境**:
- user_id, username, avatar_url, vote_count, rating, created_at, updated_at, position

### B. インデックス比較の必要性
- パフォーマンスに直結する重要な要素
- 本番環境: 78個のインデックス確認済み
- 開発環境との比較が必要

### C. その他確認すべき項目

1. **Row Level Security (RLS) ポリシー**
   - セキュリティに直結する重要な設定
   - 環境間での差異が致命的な問題を引き起こす可能性

2. **エンumタイプとカスタム型**
   - バトル形式、ステータス等のenum定義
   - カスタム型の値の差異

3. **トリガーの存在確認**
   - 自動更新処理等のトリガー設定

4. **ビューの定義**
   - 上記で見つかった複数のビューに差異あり

5. **外部キー制約**
   - データ整合性に関わる制約設定

## 3. 緊急対応が必要な項目

### 🚨 高優先度
1. **ビュー定義の統一** - 既に複数の差異を確認
2. **RLSポリシーの同期確認**
3. **インデックスの同期確認**

### ⚠️ 中優先度
4. **enum型定義の確認**
5. **トリガー設定の確認**
6. **外部キー制約の確認**

## 4. 推奨される次の行動

1. **即座にビュー定義を統一**
2. **RLSポリシーの全面的な比較実施**
3. **インデックス比較の完了**
4. **定期的な整合性チェック体制の構築**

## 5. まとめ

関数定義は完全に一致しているが、**ビュー定義に重大な差異**が発見された。これはフロントエンドのクエリエラーやデータ表示の不整合を引き起こす可能性が高い。

**緊急対応推奨**: ビュー定義の統一作業を最優先で実施すべき。

---

## 追記：migra結果（過去分）

### 環境情報
- **本番環境**: `qgqcjtjxaoplhxurbpis` (BEATNEXUS-CURSOR) - ACTIVE_HEALTHY
- **開発環境**: `wdttluticnlqzmqmfvgt` (BeatNexus.DEV) - ACTIVE_HEALTHY

### マイグレーション状況
- **本番環境**: 90個のマイグレーション適用済み
- **開発環境**: 113個のマイグレーション適用済み

### 主要な違い
1. **開発環境固有のマイグレーション**:
   - 初期開発マイグレーション（`20250520xxx`シリーズ）
   - 実験的機能（シーズン開始機能、投票者ランキング改善など）
   - 開発環境専用のテスト・デバッグ機能

## migra実行時の課題と対応

### 実行コマンド
```bash
migra "postgresql://postgres:RIKUJIshon0125@db.qgqcjtjxaoplhxurbpis.supabase.co:5432/postgres" "postgresql://postgres:RIKUJIshon0125@db.wdttluticnlqzmqmfvgt.supabase.co:5432/postgres"
```

### 発生した問題
Windows環境でのUnicodeDecodeError:
```
UnicodeDecodeError: 'utf-8' codec can't decode byte 0x82 in position 80: invalid start byte
```

### 試行した解決策
1. **エンコーディング設定**: `--force-utf8`オプション
2. **環境変数設定**: `$env:PYTHONIOENCODING="utf-8"`
3. **コードページ変更**: `chcp 65001` (UTF-8)
4. **SSL接続パラメータ**: `?sslmode=require`

### 現在の状況
Windows環境での文字エンコーディング問題により、migraツールの直接実行は困難。
ただし、MCP Supabaseツールを使用した詳細なスキーマ比較は既に完了済み。

## 注意点・改善提案
1. **マイグレーション管理の改善**: 開発環境での実験的マイグレーションと本番適用予定のマイグレーションを明確に分離する
2. **定期確認**: 月1回程度の頻度でスキーマ整合性確認を実施する
3. **migraツール活用**: パスワード情報を取得後、定期的なスキーマ比較の自動化を検討する
4. **ドキュメント化**: マイグレーション適用ルールとプロセスの文書化

## 結論
現在のデータベーススキーマは機能的には整合性が保たれており、アプリケーションの動作に支障はありません。開発環境の追加機能は適切に管理されており、本番環境への影響はありません。
