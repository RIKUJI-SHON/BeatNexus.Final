---
description:
globs:
alwaysApply: false
---
# 🧪 テストデータベース運用・新機能開発プロセス標準化ルール

## 📅 制定日
2025-06-28

## 🎯 概要
BeatNexusプロジェクトにおける安全な新機能開発のためのテストデータベース運用ルールと、本番環境への安全な適用プロセスを定める。

## 🗄️ データベース環境定義

### 本番データベース
- **Project ID**: `qgqcjtjxaoplhxurbpis`
- **名称**: BEATNEXUS-CURSOR
- **用途**: 本番環境・ユーザー向けサービス提供
- **制約**: 直接的な新機能実装・実験は**絶対禁止**

### テストデータベース
- **Project ID**: `wdttluticnlqzmqmfvgt`
- **名称**: BeatNexus.bolt
- **用途**: 新機能開発・実装テスト・データベース実験
- **特徴**: 本番データベースの完全コピーから作成

## 🔄 新機能開発必須プロセス

### 1. 開発開始時の原則
```markdown
✅ 必須ルール: 新機能実装は必ずテストDBで開始
❌ 禁止事項: 本番DBでの直接実装・実験
```

### 2. 実装ステップ（必須順序）

#### Step 1: テストDB接続確認
```bash
# 現在の接続先確認
npx supabase status

# テストDBへの切り替え（必要時）
# Project ID: wdttluticnlqzmqmfvgt を使用
```

#### Step 2: テストDB環境での実装
- データベーススキーマ変更
- 新機能の関数・ビュー作成
- Edge Function実装
- フロントエンド機能実装

#### Step 3: テストDB環境での検証
- 全機能動作確認
- データ整合性検証
- パフォーマンステスト
- セキュリティ検証

#### Step 4: マイグレーション情報の記録（**必須**）
以下の情報を必ず記録・保存する：

1. **マイグレーションファイル**
   ```sql
   -- ファイル名形式: YYYYMMDDHHMMSS_feature_name.sql
   -- 保存場所: supabase/migrations/
   ```

2. **Edge Function変更**
   ```typescript
   // 変更されたEdge Functionの完全コード
   // 保存場所: supabase/functions/
   ```

3. **フロントエンド型定義更新**
   ```typescript
   // データベース変更に伴う型定義更新
   // 自動生成コマンド記録
   npx supabase gen types typescript --project-id PROJECT_ID
   ```

4. **設定ファイル変更**
   ```toml
   # supabase/config.toml の変更点
   ```

## 📋 マイグレーション管理標準

### マイグレーションファイル命名規則
```
YYYYMMDDHHMMSS_機能名_説明.sql

例:
20250628120000_user_community_restriction.sql
20250628130000_push_notification_system.sql
```

### マイグレーション記録必須項目

#### 1. ヘッダー情報
```sql
-- ====================================================
-- 機能名: [機能名]
-- 作成日: YYYY-MM-DD
-- 実装者: [実装者名]
-- テストDB検証済み: YES/NO
-- 本番適用予定日: YYYY-MM-DD
-- 依存関係: [依存する他のマイグレーション]
-- ====================================================
```

#### 2. 変更内容詳細
- 新規テーブル作成
- カラム追加・変更・削除
- インデックス作成・削除
- 関数・ビュー作成・更新
- 権限設定変更

#### 3. ロールバック手順
```sql
-- ====================================================
-- ロールバック手順（本番適用時の緊急時用）
-- ====================================================
-- [ロールバック用SQL]
```

## 🚀 本番環境適用プロセス

### 事前チェックリスト
- [ ] テストDB環境での完全動作確認済み
- [ ] マイグレーションファイル作成済み
- [ ] ロールバック手順確認済み
- [ ] 影響範囲分析完了
- [ ] バックアップ取得予定確認

### 適用手順
1. **本番DB事前バックアップ**
2. **マイグレーション適用**
3. **Edge Function デプロイ**
4. **フロントエンド型定義更新**
5. **動作確認**
6. **ロールバック準備維持**

## 📁 ファイル管理標準

### 実装ログ保存ルール
```markdown
ファイル名: YYYY-MM-DD_機能名.mdc
保存場所: .cursor/rules/dev-rules/
必須記載項目:
- 実装概要
- テストDB検証結果
- マイグレーション詳細
- 本番適用手順
- ロールバック方法
```

### Git管理ルール
```bash
# コミット前の必須確認
git add supabase/migrations/
git add supabase/functions/
git add src/types/
git add .cursor/rules/dev-rules/

# コミットメッセージ形式
git commit -m "feat: [機能名] - テストDB実装完了

- マイグレーション: [ファイル名]
- Edge Function: [変更関数名]
- 型定義更新: [更新内容]
- テストDB検証: 完了"
```

## 🔒 セキュリティ・安全性ルール

### データベース接続安全性
- 本番DB認証情報の厳重管理
- テストDB認証情報の適切な分離
- 環境変数による接続先制御

### 本番影響最小化
- 本番DBへの直接接続は必要最小限
- 実験的な変更は絶対にテストDBのみ
- 本番適用前の十分な検証期間確保

## 🎯 品質保証標準

### テストDB検証必須項目
1. **機能動作確認**
   - 新機能の正常動作
   - 既存機能への影響なし確認
   - エラーハンドリング確認

2. **データ整合性確認**
   - 外部キー制約確認
   - データ型整合性確認
   - 必須フィールド確認

3. **パフォーマンス確認**
   - クエリ実行時間計測
   - インデックス効果確認
   - 大量データでの動作確認

## 📞 緊急時対応

### 本番環境で問題発生時
1. **即座にロールバック実行**
2. **ユーザーへの影響調査**
3. **原因分析とテストDB環境での再検証**
4. **修正版の実装・検証**
5. **再適用の判断**

## ✅ チェックリスト

### 新機能実装開始時
- [ ] テストDB環境への接続確認
- [ ] 本番DBからの最新データ同期確認
- [ ] 実装ログファイル作成

### 実装完了時
- [ ] テストDB環境での動作確認
- [ ] マイグレーションファイル作成
- [ ] Edge Function更新（該当時）
- [ ] 型定義更新（該当時）
- [ ] 実装ログ更新

### 本番適用前
- [ ] 全機能検証完了
- [ ] ロールバック手順確認
- [ ] バックアップ計画確認
- [ ] 影響範囲分析完了

---

**重要**: このルールは BeatNexus プロジェクトの安全性と品質を保証するための必須事項です。例外は認められません。

**運用開始**: 2025-06-28より適用開始
