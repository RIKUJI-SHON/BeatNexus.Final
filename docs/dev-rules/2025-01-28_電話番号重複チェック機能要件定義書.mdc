# 電話番号重複チェック機能要件定義書

## 📋 実装ログ

**作成日**: 2025年1月28日  
**対象機能**: 電話番号重複チェック・既存番号使用防止機能  
**緊急度**: 🔴 高（セキュリティホール修正）  
**対象プロジェクト**: BeatNexus 電話番号認証システム

## 🚨 現在の問題状況

### 重大なセキュリティ問題
- **同一電話番号での複数アカウント作成が可能**
- **認証記録が一切保存されない**
- **Edge Functionが存在しないDBファンクションを呼び出している**

### 影響範囲
- 新規ユーザー登録時の電話番号認証
- 既存ユーザーの電話番号追加・変更
- システム全体のデータ整合性
- 監査証跡の欠如

## 🎯 要件定義

### 1. 機能要件

#### 1.1 重複チェック機能
**FR-001**: 電話番号の重複確認
- **概要**: 新規電話番号登録時に既存データベースとの重複をチェック
- **対象テーブル**: `phone_verifications`, `auth.users`, `profiles`
- **チェック範囲**: 正規化済み電話番号での完全一致
- **レスポンス時間**: 500ms以内

**FR-002**: 国際電話番号正規化
- **概要**: 入力された電話番号を統一フォーマットに正規化
- **対応国**: 日本（+81）をプライマリ、将来的に多国対応
- **正規化ルール**: 
  - 特殊文字・ハイフン除去
  - 国番号統一（+81プレフィックス）
  - 先頭0の除去と国番号変換

**FR-003**: リアルタイム重複検出
- **概要**: SMS送信前の事前チェック
- **タイミング**: OTP送信リクエスト時
- **失敗時対応**: 409ステータスでエラーレスポンス

#### 1.2 データ永続化機能
**FR-004**: 電話番号認証記録
- **概要**: 認証成功時にデータベースに永続保存
- **保存先**: `phone_verifications`テーブル
- **関連データ**: ユーザーID、正規化済み電話番号、認証日時

**FR-005**: 認証履歴管理
- **概要**: 認証試行の完全な監査証跡
- **保存先**: `audit_logs`テーブル
- **記録項目**: 成功/失敗、IPアドレス、ユーザーエージェント、タイムスタンプ

#### 1.3 セキュリティ機能
**FR-006**: レート制限
- **概要**: 短時間での多重SMS送信防止
- **制限**: 同一電話番号あたり1時間に3回まで
- **制限期間**: 違反時は24時間ブロック

**FR-007**: 不正検出
- **概要**: 異常なパターンの検出と記録
- **対象**: 連続失敗、異なるIPからの同時アクセス
- **対応**: セキュリティログ記録、管理者通知

### 2. 非機能要件

#### 2.1 パフォーマンス要件
**NFR-001**: レスポンス時間
- 重複チェック: 500ms以内
- SMS送信: 3秒以内
- OTP検証: 1秒以内

**NFR-002**: 可用性
- システム稼働率: 99.9%以上
- データベース接続失敗時の適切なエラーハンドリング

#### 2.2 セキュリティ要件
**NFR-003**: データ保護
- 電話番号のハッシュ化保存（監査ログ）
- RLSによるアクセス制御
- SQLインジェクション対策

**NFR-004**: 監査要件
- 全ての認証試行を記録
- データ変更の完全な追跡
- セキュリティインシデントの記録

#### 2.3 拡張性要件
**NFR-005**: 国際化対応
- 複数国の電話番号フォーマット対応
- 多言語エラーメッセージ

**NFR-006**: 将来的な機能拡張
- 音声認証への対応
- 複数電話番号の管理
- 電話番号変更機能

## 🏗️ システム設計要件

### 3. データベース要件

#### 3.1 必須テーブル
```sql
-- 電話番号認証管理テーブル
phone_verifications (
  id UUID PRIMARY KEY,
  user_id UUID UNIQUE REFERENCES auth.users(id),
  phone_number TEXT UNIQUE NOT NULL,
  verified_at TIMESTAMPTZ DEFAULT NOW(),
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- 監査ログテーブル  
audit_logs (
  id UUID PRIMARY KEY,
  table_name TEXT NOT NULL,
  action TEXT NOT NULL,
  user_id UUID REFERENCES auth.users(id),
  details JSONB,
  ip_address INET,
  user_agent TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- セキュリティ監査ログテーブル
security_audit_log (
  id UUID PRIMARY KEY,
  event_type TEXT NOT NULL,
  user_id UUID REFERENCES auth.users(id),
  phone_number_hash TEXT,
  event_data JSONB,
  ip_address INET,
  user_agent TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
```

#### 3.2 必須関数
```sql
-- 電話番号重複チェック関数
check_phone_availability(phone_input TEXT) RETURNS JSON

-- 電話番号認証記録関数  
record_phone_verification(p_user_id UUID, p_phone_number TEXT) RETURNS JSON

-- 電話番号正規化関数
normalize_phone_number(phone_input TEXT) RETURNS TEXT

-- レート制限チェック関数
check_rate_limit(phone_input TEXT) RETURNS JSON
```

#### 3.3 インデックス要件
```sql
-- パフォーマンス最適化インデックス
CREATE UNIQUE INDEX idx_phone_verifications_phone_number ON phone_verifications(phone_number);
CREATE UNIQUE INDEX idx_phone_verifications_user_id ON phone_verifications(user_id);
CREATE INDEX idx_audit_logs_created_at ON audit_logs(created_at);
CREATE INDEX idx_security_audit_log_event_type ON security_audit_log(event_type);
```

### 4. Edge Function要件

#### 4.1 エラーハンドリング強化
- 存在しない関数呼び出し時の適切なエラー処理
- デバッグ情報の詳細ログ出力
- ユーザーフレンドリーなエラーメッセージ

#### 4.2 ログ機能強化
- 全ての重複チェック試行をログ
- パフォーマンスメトリクスの記録
- セキュリティイベントの記録

## 🧪 テスト要件

### 5. テストケース定義

#### 5.1 機能テスト
- **TC-001**: 新規電話番号の正常登録
- **TC-002**: 重複電話番号の拒否
- **TC-003**: 無効な電話番号フォーマットの拒否
- **TC-004**: 正規化処理の正確性
- **TC-005**: レート制限の動作確認

#### 5.2 セキュリティテスト
- **TC-006**: SQLインジェクション耐性
- **TC-007**: 不正なOTPコードの拒否
- **TC-008**: レースコンディション対応
- **TC-009**: 大量リクエスト攻撃の防御

#### 5.3 パフォーマンステスト
- **TC-010**: 同時重複チェック処理
- **TC-011**: 大量データでの検索性能
- **TC-012**: エラー時の適切なタイムアウト

## 📅 実装計画

### 6. 段階的実装アプローチ

#### Phase 1: 緊急修正（即座に実施）
1. `phone_verifications`テーブル作成
2. `check_phone_availability`関数実装
3. `record_phone_verification`関数実装
4. Edge Functionのエラーハンドリング修正

#### Phase 2: セキュリティ強化（1週間以内）
1. 監査ログシステム実装
2. レート制限機能追加
3. セキュリティログ記録
4. RLS設定

#### Phase 3: 運用改善（2週間以内）
1. 管理ダッシュボード作成
2. パフォーマンス監視設定
3. アラート機能実装
4. バックアップ・リストア機能

## 🔒 セキュリティ考慮事項

### 7. セキュリティ要件

#### 7.1 データ保護
- 電話番号のハッシュ化（SHA-256）
- 個人情報の適切な匿名化
- GDPR対応データ削除機能

#### 7.2 アクセス制御
- RLS による行レベルセキュリティ
- サービスロール限定の管理操作
- API キーの適切な管理

#### 7.3 監査証跡
- 全ての認証試行を記録
- 管理者操作のログ記録
- セキュリティインシデント追跡

## 📊 成功基準

### 8. 受け入れ基準

#### 8.1 機能基準
- ✅ 同一電話番号での複数アカウント作成が不可能
- ✅ 認証記録が適切にデータベースに保存される
- ✅ Edge Functionが正常にエラーハンドリングする
- ✅ レスポンス時間が要件を満たす

#### 8.2 セキュリティ基準
- ✅ 全ての認証試行が監査ログに記録される
- ✅ レート制限が正常に動作する
- ✅ 不正アクセス試行が検出・記録される
- ✅ データが適切に保護される

#### 8.3 運用基準
- ✅ システム稼働率99.9%を達成
- ✅ エラー発生時の適切な通知
- ✅ 管理者による監視・運用が可能

---

## 実装ログ更新履歴

**2025-01-28**: 電話番号重複チェック機能の包括的要件定義を作成。現在のセキュリティホールを修正するための詳細な仕様を策定。
