# 電話番号認証システム仕様調査結果

## 📋 実装ログ

**実装日**: 2025年1月28日  
**対象機能**: アカウント作成時の電話番号認証システム  
**調査者**: GitHub Copilot  

## � 重要な調査結果

**実際の実装状況**：電話番号認証システムは**部分的にのみ実装**されており、**重複チェック機能は動作していません**。

### ❌ 未実装・動作していない機能

1. **`phone_verifications` テーブル**: 存在しない
2. **`check_phone_availability` 関数**: 存在しない
3. **`record_phone_verification` 関数**: 存在しない
4. **`audit_logs` テーブル**: 存在しない
5. **`security_audit_log` テーブル**: 存在しない
6. **電話番号の重複チェック**: 機能していない
7. **電話番号の永続化**: `auth.users` テーブルにも保存されていない

### ✅ 実装されている機能

1. **Twilio Verify API**: SMS送信・OTP検証のみ
2. **フロントエンドUI**: 電話番号入力・OTP入力画面
3. **Edge Function**: 基本的なSMS送信・検証機能

### 🔍 実際の動作

- SMS送信：正常に動作（Twilio経由）
- OTP検証：正常に動作（Twilio経由）
- **重複チェック**：**関数が存在しないためエラーが発生し、同じ電話番号で何度でも認証可能**
- **電話番号保存**：**どこにも保存されない**
- **管理テーブル記録**：**関数が存在しないため記録されない**

## 📱 電話番号認証システム仕様

### 1. システム概要

BeatNexusのアカウント作成時には、メールアドレス、パスワード、ユーザー名に加えて、**電話番号認証が必須**となっています。これにより、1人1アカウントの制限と、認証済みユーザーのみのプラットフォーム利用を実現しています。

### 2. 技術スタック

- **SMS送信**: Twilio Verify API
- **バックエンド**: Supabase Edge Functions (Deno + TypeScript)
- **フロントエンド**: React + TypeScript
- **データベース**: PostgreSQL (Supabase)

### 3. 認証フロー

#### 🔄 サインアップ時の電話番号認証フロー

1. **ユーザー情報入力**
   - ユーザー名、メールアドレス、パスワード入力
   - の電話番号入力（国番号選択可能）

2. **SMS OTP送信**
   - フロントエンドから `phone-verification` Edge Function呼び出し
   - 電話番号重複チェック実行
   - Twilio Verify APIを使用してSMS送信

3. **OTP検証**
   - ユーザーが受信した6桁コードを入力
   - Edge FunctionでTwilio Verify APIによる検証
   - 検証成功時に電話番号を管理テーブルに記録

4. **アカウント作成**
   - 電話番号認証完了後、Supabase Auth でアカウント作成
   - `auth.users` テーブルと `phone_verifications` テーブルに情報保存

### 4. データベース設計

#### 4.1 現在の状況

**❌ 重要**: 以下のテーブル・関数は**仕様書として記載されているが実際には存在しません**。

##### ❌ `phone_verifications` テーブル（未実装）
```sql
-- このテーブルは存在しません
CREATE TABLE phone_verifications (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id),
  phone_number TEXT NOT NULL,
  verified_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

##### ❌ `audit_logs` テーブル（未実装）
```sql
-- このテーブルは存在しません
CREATE TABLE audit_logs (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  table_name TEXT NOT NULL,
  action TEXT NOT NULL,
  user_id UUID REFERENCES auth.users(id),
  details JSONB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

##### ❌ `security_audit_log` テーブル（未実装）
```sql
-- このテーブルは存在しません
CREATE TABLE security_audit_log (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  event_type TEXT NOT NULL,
  user_id UUID REFERENCES auth.users(id),
  event_data JSONB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

#### 4.2 実際に存在するテーブル

##### ✅ `profiles` テーブル（部分的に関連）
```sql
-- 実際に存在するテーブルの電話番号関連カラム
ALTER TABLE profiles ADD COLUMN phone_number VARCHAR(20) UNIQUE;
ALTER TABLE profiles ADD COLUMN phone_verified BOOLEAN DEFAULT FALSE;
```

**注意**: `auth.users` テーブルには電話番号は保存されていません。

#### 4.3 未実装の関数

##### ❌ `check_phone_availability(phone_input TEXT)`（未実装）
- **状況**: この関数は存在しないため、Edge Functionで呼び出すとエラーが発生
- **影響**: 重複チェックが全く機能しない

##### ❌ `record_phone_verification(p_user_id UUID, p_phone_number TEXT)`（未実装）
- **状況**: この関数は存在しないため、認証記録が保存されない
- **影響**: 電話番号認証が完了してもどこにも記録されない

##### ❌ `normalize_phone_number(phone_input TEXT)`（未実装）
- **状況**: この関数は存在しないが、Edge Function内で独自実装されている
- **影響**: データベースレベルでの正規化は行われない

### 5. Edge Functions

#### 5.1 現在利用中のFunction

**`phone-verification`** (現在使用中)
- **場所**: `supabase/functions/phone-verification/index.ts`
- **フロントエンドでの使用**: `src/components/auth/AuthModal.tsx` 133行目・163行目
- **バージョン**: v2.0 (管理テーブル方式対応、2025-01-27)

**主要機能**:
- SMS OTP送信 (`action: 'send_code'`)
- OTP検証 (`action: 'verify_code'`)
- 電話番号重複チェック
- 管理テーブルへの記録

**環境変数**:
- `TWILIO_ACCOUNT_SID`: Twilioアカウント識別子
- `TWILIO_AUTH_TOKEN`: Twilio認証トークン
- `TWILIO_VERIFY_SERVICE_SID`: Twilio Verifyサービス識別子
- `SUPABASE_URL`: SupabaseプロジェクトURL
- `SUPABASE_SERVICE_ROLE_KEY`: Supabaseサービスロールキー

**内部実装詳細**:

##### 電話番号正規化処理
```typescript
function normalizePhoneNumber(phoneNumber: string): string {
  // 数字と+以外を除去
  let normalized = phoneNumber.replace(/[^\d+]/g, '');
  
  // 日本の携帯電話番号の正規化
  if (normalized.match(/^0[789][0-9]{8,9}$/)) {
    // 0X0-XXXX-XXXX -> +81X0-XXXX-XXXX
    normalized = '+81' + normalized.substring(1);
  } else if (normalized.match(/^[789][0-9]{8,9}$/)) {
    // X0-XXXX-XXXX -> +81X0-XXXX-XXXX
    normalized = '+81' + normalized;
  } else if (!normalized.startsWith('+')) {
    // 国番号がない場合は日本と仮定
    normalized = '+81' + normalized;
  }
  
  return normalized;
}
```

##### SMS送信処理
- Twilio Verify APIを使用
- エンドポイント: `https://verify.twilio.com/v2/Services/{SERVICE_SID}/Verifications`
- 認証: Basic認証（ACCOUNT_SID + AUTH_TOKEN）
- チャンネル: SMS

##### OTP検証処理
- エンドポイント: `https://verify.twilio.com/v2/Services/{SERVICE_SID}/VerificationCheck`
- ステータス: `approved` で検証成功
- 失敗時: `Invalid verification code` エラー

##### 重複チェック処理
1. 電話番号正規化
2. `check_phone_availability` 関数呼び出し
3. 重複時は409ステータスで拒否
4. システムエラー時は500ステータス

##### 認証記録処理（既存ユーザー向け）
1. Authorizationヘッダーからトークン取得
2. `supabaseAdmin.auth.getUser()` でユーザー検証
3. `record_phone_verification` 関数で管理テーブルに記録
4. 成功/失敗に応じたレスポンス

#### 5.2 その他のFunction（開発・テスト用）

- `phone-verification-new`: 改良版（未使用）
- `phone-verification-fixed`: 修正版（未使用）
- `phone-verification-no-auth`: JWT認証不要版（未使用）

#### 5.3 API仕様

##### SMS送信
```typescript
POST /functions/v1/phone-verification
{
  "action": "send_code",
  "phoneNumber": "+81-90-1234-5678"
}

// 成功レスポンス
{
  "success": true,
  "message": "SMS送信が完了しました"
}

// 重複エラー
{
  "error": "phone_already_registered",
  "message": "この電話番号は既に他のアカウントで使用されています"
}
```

##### OTP検証
```typescript
POST /functions/v1/phone-verification
{
  "action": "verify_code",
  "phoneNumber": "+81-90-1234-5678",
  "code": "123456"
}

// 成功レスポンス
{
  "success": true,
  "message": "電話番号認証が完了しました"
}

// 検証失敗
{
  "error": "verification_failed",
  "message": "認証コードが正しくありません"
}
```

##### エラーレスポンス一覧
```json
// システムエラー
{
  "error": "system_error",
  "message": "システムエラーが発生しました。しばらくしてからお試しください。"
}

// 認証エラー
{
  "error": "auth_error",
  "message": "認証エラーが発生しました"
}

// 記録エラー
{
  "error": "record_error",
  "message": "電話番号認証の記録に失敗しました"
}

// 内部エラー
{
  "error": "internal_error",
  "message": "サーバー内部エラー: [詳細メッセージ]"
}
```

### 6. フロントエンド実装

#### 6.1 認証UI

**場所**: `src/components/auth/AuthModal.tsx`

**主要機能**:
- 国番号選択ドロップダウン（日本、アメリカ、イギリスなど15カ国対応）
- 電話番号入力フィールド
- SMS送信ボタン
- OTP入力フィールド
- 検証ボタン

#### 6.2 認証フロー制御

**状態管理**:
```typescript
const [phoneNumber, setPhoneNumber] = useState('');
const [otpCode, setOtpCode] = useState('');
const [otpSent, setOtpSent] = useState(false);
const [phoneVerified, setPhoneVerified] = useState(false);
const [sendingOtp, setSendingOtp] = useState(false);
const [verifyingOtp, setVerifyingOtp] = useState(false);
```

**認証必須チェック**:
```typescript
if (mode === 'signup' && !phoneVerified) {
  setError(t('auth.error.invalidPhone'));
  return;
}
```

### 7. セキュリティ機能の現状

#### 7.1 ❌ 重複防止機能（未実装）

**重大な問題**: 重複防止機能が全く実装されていません。

- **電話番号の重複チェック**: `check_phone_availability` 関数が存在しないため、同じ電話番号で何度でもアカウント作成可能
- **認証記録の保存**: `record_phone_verification` 関数が存在しないため、どこにも記録されない
- **正規化処理**: データベースレベルでの正規化は未実装（Edge Function内では実装済み）

#### 7.2 ✅ 電話番号正規化（部分実装）
- **Edge Function内**: 正規化処理は実装済み
  - 国際形式への統一（+81プレフィックス）
  - 特殊文字・ハイフンの除去
  - 日本の電話番号形式への対応
- **データベース**: 正規化関数は未実装

#### 7.3 ❌ 監査ログ（未実装）
- **認証試行記録**: `audit_logs` テーブルが存在しないため記録されない
- **セキュリティ監査**: `security_audit_log` テーブルが存在しないため記録されない
- **電話番号ハッシュ化**: 未実装

#### 7.4 ❌ RLS (Row Level Security)（未実装）
- **テーブル不存在**: 関連テーブルが存在しないため、RLSも未設定
- **アクセス制御**: 実装されていない

### 8. エラーハンドリング

#### 8.1 主要エラーコード

| エラーコード | メッセージ | 原因 |
|-------------|-----------|------|
| `phone_already_registered` | この電話番号は既に他のアカウントで使用されています | 電話番号重複 |
| `invalid_otp_code` | 認証コードが正しくありません | OTP検証失敗 |
| `system_error` | システムエラーが発生しました | サーバーエラー |

#### 8.2 多言語対応

日本語・英語でのエラーメッセージ対応:
```json
// i18n/locales/ja.json
{
  "auth": {
    "error": {
      "phoneAlreadyRegistered": "この電話番号は既に別のアカウントで使用されています。別の電話番号をお試しください。"
    }
  }
}
```

### 9. テスト環境

#### 9.1 テストスクリプト
- `test-phone-verification.sh`: Edge Functionテスト用シェルスクリプト
- `test-phone-verification.ps1`: PowerShell版テストスクリプト

#### 9.2 開発・本番環境
- **開発環境**: プロジェクトID `wdttluticnlqzmqmfvgt`
- **本番環境**: プロジェクトID `qgqcjtjxaoplhxurbpis`

### 10. 緊急対応が必要な問題点

#### 10.1 ❌ セキュリティ上の重大な欠陥
**同一電話番号での複数アカウント作成が可能**
- **現象**: 同じ電話番号で何度でもアカウント作成できる
- **原因**: `check_phone_availability` 関数と `phone_verifications` テーブルが存在しない
- **影響**: セキュリティホール、スパムアカウント作成が容易
- **緊急度**: 🔴 高（即座に対応が必要）

#### 10.2 ❌ データ整合性の問題
**認証記録が一切保存されない**
- **現象**: 電話番号認証を完了してもどこにも記録されない
- **原因**: `record_phone_verification` 関数と関連テーブルが存在しない
- **影響**: 認証履歴の追跡不可、監査証跡なし
- **緊急度**: 🔴 高（データガバナンス上の問題）

#### 10.3 ❌ システム機能の不備
**Edge Functionが正常に動作していない**
- **現象**: データベース関数呼び出しが静かに失敗している
- **原因**: 存在しない関数を呼び出しているが、エラーハンドリングが不適切
- **影響**: 表面上は動作しているように見えるが、実際は機能していない
- **緊急度**: 🟡 中（運用上の問題）

#### 10.4 必要な対応
1. **即座の対応**: 
   - `phone_verifications` テーブルの作成
   - `check_phone_availability` 関数の実装
   - `record_phone_verification` 関数の実装

2. **段階的改善**:
   - 監査ログ機能の実装
   - RLSの設定
   - レート制限の強化

---

## 実装ログ更新履歴

**2025-01-28**: 電話番号認証システムの現状調査を実施。重大なセキュリティ上の欠陥を発見。フロントエンドとEdge Functionは正常だが、データベース側の実装が完全に不足していることが判明。
- より詳細な統計・分析機能

## 🔐 セキュリティ考慮事項

1. **電話番号の暗号化**: セキュリティログでは電話番号をSHA256でハッシュ化
2. **権限分離**: サービスロールのみがデータ操作可能
3. **監査証跡**: 全ての認証試行を記録
4. **レースコンディション対策**: 二重チェック機能実装

## 📊 統計・管理機能

### 管理用ビュー
```sql
-- 電話番号認証状況の統計
SELECT * FROM phone_verification_stats;
```

### 主要指標
- 総ユーザー数
- 電話番号認証済みユーザー数
- 固有の認証済み電話番号数
- 管理テーブル記録数

## 🚀 本番適用状況

電話番号認証システムは既に本番環境に適用済みで、新規ユーザー登録時に必須機能として動作しています。

---

**実装完了日**: 2025年1月27日  
**本番適用日**: 2025年1月27日  
**最終更新**: 2025年1月28日（仕様調査）
